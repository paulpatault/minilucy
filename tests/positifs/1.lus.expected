
/**************************************/
/* Sugar automaton print              */
/**************************************/
type inductive_bool =
  | False
  | True

node counting(tic : bool; toc : bool) returns (o : int; y : int);
var v : int;
let
  (o) = ite(tic, v, (0) -> (add(pre (o), v)));
  (v) = ite(toc, 1, 0);
  (y) = v;
tel

node main0(x : bool) returns (o : bool);
var y : int; z : int;
let
  (y, z) = counting(x, x);
  (o) = merge x 
          (true -> false when True(x))
          (false -> true when False(x));
tel

/**************************************/
/* Typed ast                          */
/**************************************/
type inductive_bool =
  | False
  | True

node counting__10(tic__8 : bool; toc__9 : bool) returns (o__5 : int;
                                                         y__6 : int)
var v__7: int;
let
  (o__5) = merge tic__8 
             (true -> v__7 when True(tic__8))
             (false -> ite(true fby false, 0, add(0 fby o__5,
                       v__7)) when False(tic__8));
  (v__7) = merge toc__9 
             (true -> 1 when True(toc__9))
             (false -> 0 when False(toc__9));
  (y__6) = v__7;
tel

node main0__15(x__14 : bool) returns (o__11 : bool)
var y__12: int; z__13: int;
let
  (y__12, z__13) = counting__10(x__14, x__14);
  (o__11) = merge x__14 
              (true -> false when True(x__14))
              (false -> true when False(x__14));
tel

/**************************************/
/* Normalized ast                     */
/**************************************/
type inductive_bool =
  | False
  | True

node counting__10(tic__8 : bool; toc__9 : bool) returns (o__5 : int;
                                                         y__6 : int)
var aux'4__19: int; aux'3__18: int; aux'2__17: bool; aux'1__16: bool;
    v__7: int;
let
  (aux'4__19) = 0 fby aux'3__18;
  (aux'3__18) = o__5;
  (aux'2__17) = true fby aux'1__16;
  (aux'1__16) = false;
  (o__5) = merge tic__8 
             (true -> v__7 when True(tic__8))
             (false -> ite(aux'2__17, 0, add(aux'4__19,
                       v__7)) when False(tic__8));
  (v__7) = merge toc__9 
             (true -> 1 when True(toc__9))
             (false -> 0 when False(toc__9));
  (y__6) = v__7;
tel

node main0__15(x__14 : bool) returns (o__11 : bool)
var aux'5__20: int; aux'6__21: int; y__12: int; z__13: int;
let
  (aux'5__20, aux'6__21) = counting__10(x__14, x__14);
  (y__12, z__13) = (aux'5__20, aux'6__21);
  (o__11) = merge x__14 
              (true -> false when True(x__14))
              (false -> true when False(x__14));
tel

/**************************************/
/* Clocked ast                          */
/**************************************/
type inductive_bool =
  | False
  | True

node counting__10(tic__8 : bool :: Base, toc__9 : bool :: Base)
  returns (o__5 : int :: Base, y__6 : int :: Base)
var aux'4__19 : int :: Base, aux'3__18 : int :: Base, aux'2__17 : bool :: Base, 
    aux'1__16 : bool :: Base, v__7 : int :: Base;
let
  (aux'4__19) = 0 fby aux'3__18;
  (aux'3__18) = o__5;
  (aux'2__17) = true fby aux'1__16;
  (aux'1__16) = false;
  (o__5) = merge tic__8 
           (true -> v__7 when True(tic__8))
           (false -> ite(aux'2__17, 0, add(aux'4__19, v__7)) when False(tic__8));
  (v__7) = merge toc__9 
           (true -> 1 when True(toc__9))
           (false -> 0 when False(toc__9));
  (y__6) = v__7
tel
node main0__15(x__14 : bool :: Base)
  returns (o__11 : bool :: Base)
var aux'5__20 : int :: Base, aux'6__21 : int :: Base, y__12 : int :: Base, 
    z__13 : int :: Base;
let
  (aux'5__20, aux'6__21) = counting__10(x__14, x__14);
  (y__12, z__13) = (aux'5__20, aux'6__21);
  (o__11) = merge x__14 
            (true -> false when True(x__14))
            (false -> true when False(x__14))
tel
/**************************************/
/* Scheduled ast                      */
/**************************************/
type inductive_bool =
  | False
  | True

node counting__10(tic__8 : bool :: Base, toc__9 : bool :: Base)
  returns (o__5 : int :: Base, y__6 : int :: Base)
var aux'4__19 : int :: Base, aux'3__18 : int :: Base, aux'2__17 : bool :: Base, 
    aux'1__16 : bool :: Base, v__7 : int :: Base;
let
  (v__7) = merge toc__9 
           (true -> 1 when True(toc__9))
           (false -> 0 when False(toc__9));
  (aux'1__16) = false;
  (aux'2__17) = true fby aux'1__16;
  (aux'4__19) = 0 fby aux'3__18;
  (o__5) = merge tic__8 
           (true -> v__7 when True(tic__8))
           (false -> ite(aux'2__17, 0, add(aux'4__19, v__7)) when False(tic__8));
  (y__6) = v__7;
  (aux'3__18) = o__5
tel
node main0__15(x__14 : bool :: Base)
  returns (o__11 : bool :: Base)
var aux'5__20 : int :: Base, aux'6__21 : int :: Base, y__12 : int :: Base, 
    z__13 : int :: Base;
let
  (o__11) = merge x__14 
            (true -> false when True(x__14))
            (false -> true when False(x__14));
  (aux'5__20, aux'6__21) = counting__10(x__14, x__14);
  (y__12, z__13) = (aux'5__20, aux'6__21)
tel
/**************************************/
/* Imp ast                            */
/**************************************/
type inductive_bool =
  | False
  | True

node counting__10(tic__8 : bool :: Base, toc__9 : bool :: Base)
  returns (o__5 : int :: Base, y__6 : int :: Base)
var aux'4__19 : int :: Base, aux'3__18 : int :: Base, aux'2__17 : bool :: Base, 
    aux'1__16 : bool :: Base, v__7 : int :: Base;
  mem={node=[]
       fby=[aux'2_next2__23 : bool :: Base, aux'4_next1__22 : int :: Base]}
  init={node=[]
        fby=[(aux'2_next2__23,true), (aux'4_next1__22,0)]}
  compute={(v__7 : int :: Base) = case(toc__9)True'inductive_bool: 1;
                                                False'inductive_bool: 0;
           (aux'1__16 : bool :: Base) = false;
           (aux'2__17 : bool :: Base) = aux'2_next2__23;
           (aux'4__19 : int :: Base) = aux'4_next1__22;
           (o__5 : int :: Base) = case(tic__8)True'inductive_bool: v__7;
                                                False'inductive_bool: 
                                                ite(aux'2__17, 0,
                                                add(aux'4__19, v__7));
           (y__6 : int :: Base) = v__7;
           (aux'3__18 : int :: Base) = o__5}
  update={(aux'2_next2__23,aux'1__16);
          (aux'4_next1__22,aux'3__18)}
  
node main0__15(x__14 : bool :: Base)
  returns (o__11 : bool :: Base)
var aux'5__20 : int :: Base, aux'6__21 : int :: Base, y__12 : int :: Base, 
    z__13 : int :: Base;
  mem={node=[(counting_next1__24,counting__10)]
       fby=[]}
  init={node=[(counting_next1__24,counting__10)]
        fby=[]}
  compute={(o__11 : bool :: Base) = case(x__14)True'inductive_bool: false;
                                                 False'inductive_bool: true;
           (aux'5__20 : int :: Base, aux'6__21 : int :: Base) = counting__10 <- counting_next1__24(
                                                                x__14, x__14);
           (y__12 : int :: Base, z__13 : int :: Base) = (aux'5__20, aux'6__21)}
  update={}
  
/**************************************/
/* C file                             */
/**************************************/
#include <stdlib.h>

#include <printf.h>

#include <unistd.h>

int int_read() {
  int var;
  scanf("%d", &var);
  return var;
}

enum inductive_bool {
  FALSE,
  TRUE
};

struct counting_mem {
  int aux__2_next2;
  int aux__4_next1;
};

void counting_init (struct counting_mem* mem) {
  mem->aux__2_next2 = 1;
  
  mem->aux__4_next1 = 0;
}

struct counting_ret {
  int o;
  int y;
};

struct counting_ret counting (struct counting_mem* mem, int tic, int toc) {
  int aux__4;
  int aux__3;
  int aux__2;
  int aux__1;
  int v;
  struct counting_ret ret_;
  enum inductive_bool switch_1;
  enum inductive_bool switch_2;
  
  switch (toc) {
    case TRUE: {
      switch_1 = 1;
      break;
    }
    case FALSE: {
      switch_1 = 0;
      break;
    }
  };
  
  v = switch_1;
  
  aux__1 = 0;
  
  aux__2 = mem->aux__2_next2;
  
  aux__4 = mem->aux__4_next1;
  
  switch (tic) {
    case TRUE: {
      switch_2 = v;
      break;
    }
    case FALSE: {
      switch_2 = aux__2 ? 0 : (aux__4 + v);
      break;
    }
  };
  
  ret_.o = switch_2;
  
  ret_.y = v;
  
  aux__3 = ret_.o;
  
  mem->aux__2_next2 = aux__1;
  
  mem->aux__4_next1 = aux__3;
  
  return ret_;
}

struct main0_mem {
  struct counting_mem counting_next1;
};

void main0_init (struct main0_mem* mem) {
  counting_init(&(mem->counting_next1));
}

struct tuple_ty_1 {
  int tuple_field_1;
  int tuple_field_2;
};

int main0 (struct main0_mem* mem, int x) {
  int aux__5;
  int aux__6;
  int y;
  int z;
  int o;
  enum inductive_bool switch_3;
  struct counting_ret call_1;
  struct tuple_ty_1 tuple_ty_1__;
  
  switch (x) {
    case TRUE: {
      switch_3 = 0;
      break;
    }
    case FALSE: {
      switch_3 = 1;
      break;
    }
  };
  
  o = switch_3;
  
  call_1 = counting(&(mem->counting_next1), x, x);
  
  aux__5 = call_1.o;
  
  aux__6 = call_1.y;
  
  tuple_ty_1__.tuple_field_1 = aux__5;
  
  tuple_ty_1__.tuple_field_2 = aux__6;
  
  y = tuple_ty_1__.tuple_field_1;
  
  z = tuple_ty_1__.tuple_field_2;
  
  return o;
}

int main (int argc, char* argv[]) {
  struct main0_mem mem;
  int argv_0;
  int res;
  
  main0_init(&(mem));
  
  while (1) {
    argv_0 = int_read();
    
    res = main0(&(mem), argv_0);
    
    printf("%d ", res);
    
    fflush(0);
    
    usleep(333333);
  };
}
