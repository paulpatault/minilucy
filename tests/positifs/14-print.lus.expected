
/**************************************/
/* Sugar automaton print              */
/**************************************/
type inductive_bool =
  | False
  | True

node main0(x : int) returns (o : bool);
var print_var__1 : int;
let
  (print_var__1) = print("\"test :: %d\\n\\t\""x);
  (o) = true;
tel

/**************************************/
/* Typed ast                          */
/**************************************/
type inductive_bool =
  | False
  | True

node main0__8(x__7 : int) returns (o__5 : bool)
var print_var__1__6: int;
let
  (print_var__1__6) = print("\"test :: %d\\n\\t\"", x__7);
  (o__5) = true;
tel

/**************************************/
/* Normalized ast                     */
/**************************************/
type inductive_bool =
  | False
  | True

node main0__8(x__7 : int) returns (o__5 : bool)
var aux'1__9: int; print_var__1__6: int;
let
  (aux'1__9) = print("\"test :: %d\\n\\t\"", x__7);
  (print_var__1__6) = aux'1__9;
  (o__5) = true;
tel

/**************************************/
/* Clocked ast                          */
/**************************************/
type inductive_bool =
  | False
  | True

node main0__8(x__7 : int :: Base)
  returns (o__5 : bool :: ck1)
var aux'1__9 : int :: Base, print_var__1__6 : int :: Base;
let
  (aux'1__9) = print("\"test :: %d\\n\\t\"", x__7);
  (print_var__1__6) = aux'1__9;
  (o__5) = true
tel
/**************************************/
/* Scheduled ast                      */
/**************************************/
type inductive_bool =
  | False
  | True

node main0__8(x__7 : int :: Base)
  returns (o__5 : bool :: ck1)
var aux'1__9 : int :: Base, print_var__1__6 : int :: Base;
let
  (o__5) = true;
  (aux'1__9) = print("\"test :: %d\\n\\t\"", x__7);
  (print_var__1__6) = aux'1__9
tel
/**************************************/
/* Imp ast                            */
/**************************************/
type inductive_bool =
  | False
  | True

node main0__8(x__7 : int :: Base)
  returns (o__5 : bool :: ck1)
var aux'1__9 : int :: Base, print_var__1__6 : int :: Base;
  mem={node=[]
       fby=[]}
  init={node=[]
        fby=[]}
  compute={(o__5 : bool :: ck1) = true;
           (aux'1__9 : int :: Base) = print("\"test :: %d\\n\\t\"", x__7);
           (print_var__1__6 : int :: Base) = aux'1__9}
  update={}
  
/**************************************/
/* C file                             */
/**************************************/
#include <stdlib.h>

#include <printf.h>

#include <unistd.h>

int int_read() {
  int var;
  scanf("%d", &var);
  return var;
}

enum inductive_bool {
  FALSE,
  TRUE
};

int main0 (int x) {
  int aux__1;
  int o;
  int call_1;
  
  o = 1;
  
  printf("test :: %d\n\t", x);
  
  aux__1 = call_1;
  
  return o;
}

int main (int argc, char* argv[]) {
  int argv_0;
  int res;
  
  while (1) {
    argv_0 = int_read();
    
    res = main0(argv_0);
    
    printf("%d\n", res);
    
    fflush(0);
    
    usleep(333333);
  };
}
