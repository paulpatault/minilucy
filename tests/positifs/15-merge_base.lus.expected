
/**************************************/
/* Sugar automaton print              */
/**************************************/
type inductive_bool =
  | False
  | True
type t =
  | A
  | B

node main0() returns (o : int);
var tmp : t;
let
  (tmp) = (A't) -> (pre (merge tmp 
                           (A't -> B't when A(tmp))
                           (B't -> A't when B(tmp))));
  (o) = (0) -> (merge tmp 
                  (A't -> pre (o))
                  (B't -> add(pre (o), 1)));
tel

/**************************************/
/* Typed ast                          */
/**************************************/
type inductive_bool =
  | False
  | True
type t =
  | A
  | B

node main0__7() returns (o__5 : int)
var tmp__6: t;
let
  (tmp__6) = ite(true fby false, A't,
             default(t) fby merge tmp__6 
                              (A't -> B't when A(tmp__6))
                              (B't -> A't when B(tmp__6)));
  (o__5) = ite(true fby false, 0,
           merge tmp__6 
             (A't -> 0 fby o__5)
             (B't -> add(0 fby o__5, 1)));
tel

/**************************************/
/* Normalized ast                     */
/**************************************/
type inductive_bool =
  | False
  | True
type t =
  | A
  | B

node main0__7() returns (o__5 : int)
var aux'10__17: int; aux'9__16: int; aux'8__15: int; aux'7__14: int;
    aux'6__13: bool; aux'5__12: bool; aux'4__11: t; aux'3__10: t;
    aux'2__9: bool; aux'1__8: bool; tmp__6: t;
let
  (aux'4__11) = default(t) fby aux'3__10;
  (aux'3__10) = merge tmp__6 
                  (A't -> B't when A(tmp__6))
                  (B't -> A't when B(tmp__6));
  (aux'2__9) = true fby aux'1__8;
  (aux'1__8) = false;
  (tmp__6) = ite(aux'2__9, A't, aux'4__11);
  (aux'10__17) = 0 fby aux'9__16;
  (aux'9__16) = o__5;
  (aux'8__15) = 0 fby aux'7__14;
  (aux'7__14) = o__5;
  (aux'6__13) = true fby aux'5__12;
  (aux'5__12) = false;
  (o__5) = ite(aux'6__13, 0,
           merge tmp__6 
             (A't -> aux'8__15)
             (B't -> add(aux'10__17, 1)));
tel

/**************************************/
/* Clocked ast                          */
/**************************************/
type inductive_bool =
  | False
  | True
type t =
  | A
  | B

node main0__7()
  returns (o__5 : int :: Base)
var aux'10__17 : int :: Base, aux'9__16 : int :: Base, aux'8__15 : int :: Base, 
    aux'7__14 : int :: Base, aux'6__13 : bool :: Base, aux'5__12 : bool :: Base, 
    aux'4__11 : t :: Base, aux'3__10 : t :: Base, aux'2__9 : bool :: Base, 
    aux'1__8 : bool :: Base, tmp__6 : t :: Base;
let
  (aux'4__11) = default(t) fby aux'3__10;
  (aux'3__10) = merge tmp__6 
                (A't -> B't when A(tmp__6))
                (B't -> A't when B(tmp__6));
  (aux'2__9) = true fby aux'1__8;
  (aux'1__8) = false;
  (tmp__6) = ite(aux'2__9, A't, aux'4__11);
  (aux'10__17) = 0 fby aux'9__16;
  (aux'9__16) = o__5;
  (aux'8__15) = 0 fby aux'7__14;
  (aux'7__14) = o__5;
  (aux'6__13) = true fby aux'5__12;
  (aux'5__12) = false;
  (o__5) = ite(aux'6__13, 0, merge tmp__6 
              (A't -> aux'8__15)
              (B't -> add(aux'10__17, 1)))
tel
/**************************************/
/* Scheduled ast                      */
/**************************************/
type inductive_bool =
  | False
  | True
type t =
  | A
  | B

node main0__7()
  returns (o__5 : int :: Base)
var aux'10__17 : int :: Base, aux'9__16 : int :: Base, aux'8__15 : int :: Base, 
    aux'7__14 : int :: Base, aux'6__13 : bool :: Base, aux'5__12 : bool :: Base, 
    aux'4__11 : t :: Base, aux'3__10 : t :: Base, aux'2__9 : bool :: Base, 
    aux'1__8 : bool :: Base, tmp__6 : t :: Base;
let
  (aux'1__8) = false;
  (aux'2__9) = true fby aux'1__8;
  (aux'4__11) = default(t) fby aux'3__10;
  (aux'5__12) = false;
  (aux'6__13) = true fby aux'5__12;
  (aux'8__15) = 0 fby aux'7__14;
  (aux'10__17) = 0 fby aux'9__16;
  (tmp__6) = ite(aux'2__9, A't, aux'4__11);
  (o__5) = ite(aux'6__13, 0, merge tmp__6 
              (A't -> aux'8__15)
              (B't -> add(aux'10__17, 1)));
  (aux'3__10) = merge tmp__6 
                (A't -> B't when A(tmp__6))
                (B't -> A't when B(tmp__6));
  (aux'7__14) = o__5;
  (aux'9__16) = o__5
tel
/**************************************/
/* Imp ast                            */
/**************************************/
type inductive_bool =
  | False
  | True
type t =
  | A
  | B

node main0__7()
  returns (o__5 : int :: Base)
var aux'10__17 : int :: Base, aux'9__16 : int :: Base, aux'8__15 : int :: Base, 
    aux'7__14 : int :: Base, aux'6__13 : bool :: Base, aux'5__12 : bool :: Base, 
    aux'4__11 : t :: Base, aux'3__10 : t :: Base, aux'2__9 : bool :: Base, 
    aux'1__8 : bool :: Base, tmp__6 : t :: Base;
  mem={node=[]
       fby=[aux'2_next5__22 : bool :: Base, aux'4_next4__21 : t :: Base, 
            aux'6_next3__20 : bool :: Base, aux'8_next2__19 : int :: Base, 
            aux'10_next1__18 : int :: Base]}
  init={node=[]
        fby=[(aux'2_next5__22,true), (aux'4_next4__21,default(t)), (aux'6_next3__20,true), (aux'8_next2__19,0), (aux'10_next1__18,0)]}
  compute={(aux'1__8 : bool :: Base) = false;
           (aux'2__9 : bool :: Base) = aux'2_next5__22;
           (aux'4__11 : t :: Base) = aux'4_next4__21;
           (aux'5__12 : bool :: Base) = false;
           (aux'6__13 : bool :: Base) = aux'6_next3__20;
           (aux'8__15 : int :: Base) = aux'8_next2__19;
           (aux'10__17 : int :: Base) = aux'10_next1__18;
           (tmp__6 : t :: Base) = ite(aux'2__9, A't, aux'4__11);
           (o__5 : int :: Base) = ite(aux'6__13, 0,
                                  case(tmp__6)A't: aux'8__15;
                                                B't: add(aux'10__17, 1));
           (aux'3__10 : t :: Base) = case(tmp__6)A't: B't;
                                                   B't: A't;
           (aux'7__14 : int :: Base) = o__5;
           (aux'9__16 : int :: Base) = o__5}
  update={(aux'2_next5__22,aux'1__8);
          (aux'4_next4__21,aux'3__10);
          (aux'6_next3__20,aux'5__12);
          (aux'8_next2__19,aux'7__14);
          (aux'10_next1__18,aux'9__16)}
  
/**************************************/
/* C file                             */
/**************************************/
#include <stdlib.h>

#include <printf.h>

#include <unistd.h>

int int_read() {
  int var;
  scanf("%d", &var);
  return var;
}

enum inductive_bool {
  FALSE,
  TRUE
};

enum t {
  A,
  B
};

struct main0_mem {

  int aux__2_next5;
  enum t aux__4_next4;
  int aux__6_next3;
  int aux__8_next2;
  int aux__10_next1;
};

void main0_init (struct main0_mem* mem) {
  mem->aux__2_next5 = 1;
  
  mem->aux__4_next4 = A;
  
  mem->aux__6_next3 = 1;
  
  mem->aux__8_next2 = 0;
  
  mem->aux__10_next1 = 0;
}

int main0 (struct main0_mem* mem) {
  int aux__10;
  int aux__9;
  int aux__8;
  int aux__7;
  int aux__6;
  int aux__5;
  enum t aux__4;
  enum t aux__3;
  int aux__2;
  int aux__1;
  enum t tmp;
  int o;
  enum t switch_1;
  enum t switch_2;
  
  aux__1 = 0;
  
  aux__2 = mem->aux__2_next5;
  
  aux__4 = mem->aux__4_next4;
  
  aux__5 = 0;
  
  aux__6 = mem->aux__6_next3;
  
  aux__8 = mem->aux__8_next2;
  
  aux__10 = mem->aux__10_next1;
  
  tmp = aux__2 ? A : aux__4;
  
  switch (tmp) {
    case A: {
      switch_1 = aux__8;
      break;
    }
    case B: {
      switch_1 = (aux__10 + 1);
      break;
    }
  };
  
  o = aux__6 ? 0 : switch_1;
  
  switch (tmp) {
    case A: {
      switch_2 = B;
      break;
    }
    case B: {
      switch_2 = A;
      break;
    }
  };
  
  aux__3 = switch_2;
  
  aux__7 = o;
  
  aux__9 = o;
  
  mem->aux__2_next5 = aux__1;
  
  mem->aux__4_next4 = aux__3;
  
  mem->aux__6_next3 = aux__5;
  
  mem->aux__8_next2 = aux__7;
  
  mem->aux__10_next1 = aux__9;
  
  return o;
}

int main (int argc, char* argv[]) {
  struct main0_mem mem;
  int res;
  
  main0_init(&(mem));
  
  while (1) {
    res = main0(&(mem));
    
    printf("%d\n", res);
    
    fflush(0);
    
    usleep(333333);
  };
}
