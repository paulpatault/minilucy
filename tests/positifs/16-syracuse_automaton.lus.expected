
/**************************************/
/* Sugar automaton print              */
/**************************************/
type inductive_bool =
  | False
  | True
type typ__1 =
  | Even
  | Odd

node main0(i : int) returns (o : int);
var state__2 : typ__1; cond__4 : bool; cond__3 : bool;
let
  (cond__4) = eq(mod(o, 2), 0);
  (cond__3) = eq(mod(o, 2), 1);
  (state__2) = (Even'typ__1) -> (pre (merge state__2 
                                        (Even'typ__1 -> ite(cond__3,
                                        Odd'typ__1,
                                        Even'typ__1))
                                        (Odd'typ__1 -> ite(cond__4,
                                        Even'typ__1, Odd'typ__1))));
  (o) = merge state__2 
          (Even'typ__1 -> (i) -> (div(pre (o), 2)))
          (Odd'typ__1 -> (i) -> (add(mul(pre (o), 3), 1)));
tel

/**************************************/
/* Typed ast                          */
/**************************************/
type inductive_bool =
  | False
  | True
type typ__1 =
  | Even
  | Odd

node main0__10(i__9 : int) returns (o__5 : int)
var state__2__6: typ__1; cond__4__7: bool; cond__3__8: bool;
let
  (cond__4__7) = eq(mod(o__5, 2), 0);
  (cond__3__8) = eq(mod(o__5, 2), 1);
  (state__2__6) = ite(true fby false, Even'typ__1,
                  default(typ__1) fby merge state__2__6 
                                        (Even'typ__1 -> merge cond__3__8 
                                                          (true -> Odd'typ__1 when True(cond__3__8))
                                                          (false -> Even'typ__1 when False(cond__3__8)))
                                        (Odd'typ__1 -> merge cond__4__7 
                                                         (true -> Even'typ__1 when True(cond__4__7))
                                                         (false -> Odd'typ__1 when False(cond__4__7))));
  (o__5) = merge state__2__6 
             (Even'typ__1 -> ite(true fby false, i__9, div(0 fby o__5,
             2)))
             (Odd'typ__1 -> ite(true fby false, i__9, add(mul(0 fby o__5, 3),
             1)));
tel

/**************************************/
/* Normalized ast                     */
/**************************************/
type inductive_bool =
  | False
  | True
type typ__1 =
  | Even
  | Odd

node main0__10(i__9 : int) returns (o__5 : int)
var aux'12__22: int; aux'11__21: int; aux'10__20: bool; aux'9__19: bool;
    aux'8__18: int; aux'7__17: int; aux'6__16: bool; aux'5__15: bool;
    aux'4__14: typ__1; aux'3__13: typ__1; aux'2__12: bool; aux'1__11: bool;
    state__2__6: typ__1; cond__4__7: bool; cond__3__8: bool;
let
  (cond__4__7) = eq(mod(o__5, 2), 0);
  (cond__3__8) = eq(mod(o__5, 2), 1);
  (aux'4__14) = default(typ__1) fby aux'3__13;
  (aux'3__13) = merge state__2__6 
                  (Even'typ__1 -> merge cond__3__8 
                                    (true -> Odd'typ__1 when True(cond__3__8))
                                    (false -> Even'typ__1 when False(cond__3__8)))
                  (Odd'typ__1 -> merge cond__4__7 
                                   (true -> Even'typ__1 when True(cond__4__7))
                                   (false -> Odd'typ__1 when False(cond__4__7)));
  (aux'2__12) = true fby aux'1__11;
  (aux'1__11) = false;
  (state__2__6) = ite(aux'2__12, Even'typ__1, aux'4__14);
  (aux'12__22) = 0 fby aux'11__21;
  (aux'11__21) = o__5;
  (aux'10__20) = true fby aux'9__19;
  (aux'9__19) = false;
  (aux'8__18) = 0 fby aux'7__17;
  (aux'7__17) = o__5;
  (aux'6__16) = true fby aux'5__15;
  (aux'5__15) = false;
  (o__5) = merge state__2__6 
             (Even'typ__1 -> ite(aux'6__16, i__9, div(aux'8__18,
             2)))
             (Odd'typ__1 -> ite(aux'10__20, i__9, add(mul(aux'12__22, 3),
             1)));
tel

/**************************************/
/* Clocked ast                          */
/**************************************/
type inductive_bool =
  | False
  | True
type typ__1 =
  | Even
  | Odd

node main0__10(i__9 : int :: Base)
  returns (o__5 : int :: Base)
var aux'12__22 : int :: Base, aux'11__21 : int :: Base, aux'10__20 : bool :: Base, 
    aux'9__19 : bool :: Base, aux'8__18 : int :: Base, aux'7__17 : int :: Base, 
    aux'6__16 : bool :: Base, aux'5__15 : bool :: Base, aux'4__14 : typ__1 :: Base, 
    aux'3__13 : typ__1 :: Base, aux'2__12 : bool :: Base, aux'1__11 : bool :: Base, 
    state__2__6 : typ__1 :: Base, cond__4__7 : bool :: Base, cond__3__8 : bool :: Base;
let
  (cond__4__7) = eq(mod(o__5, 2), 0);
  (cond__3__8) = eq(mod(o__5, 2), 1);
  (aux'4__14) = default(typ__1) fby aux'3__13;
  (aux'3__13) = merge state__2__6 
                (Even'typ__1 -> merge cond__3__8 
                (true -> Odd'typ__1 when True(cond__3__8))
                (false -> Even'typ__1 when False(cond__3__8)))
                (Odd'typ__1 -> merge cond__4__7 
                (true -> Even'typ__1 when True(cond__4__7))
                (false -> Odd'typ__1 when False(cond__4__7)));
  (aux'2__12) = true fby aux'1__11;
  (aux'1__11) = false;
  (state__2__6) = ite(aux'2__12, Even'typ__1, aux'4__14);
  (aux'12__22) = 0 fby aux'11__21;
  (aux'11__21) = o__5;
  (aux'10__20) = true fby aux'9__19;
  (aux'9__19) = false;
  (aux'8__18) = 0 fby aux'7__17;
  (aux'7__17) = o__5;
  (aux'6__16) = true fby aux'5__15;
  (aux'5__15) = false;
  (o__5) = merge state__2__6 
           (Even'typ__1 -> ite(aux'6__16, i__9, div(aux'8__18, 2)))
           (Odd'typ__1 -> ite(aux'10__20, i__9, add(mul(aux'12__22, 3), 1)))
tel
/**************************************/
/* Scheduled ast                      */
/**************************************/
type inductive_bool =
  | False
  | True
type typ__1 =
  | Even
  | Odd

node main0__10(i__9 : int :: Base)
  returns (o__5 : int :: Base)
var aux'12__22 : int :: Base, aux'11__21 : int :: Base, aux'10__20 : bool :: Base, 
    aux'9__19 : bool :: Base, aux'8__18 : int :: Base, aux'7__17 : int :: Base, 
    aux'6__16 : bool :: Base, aux'5__15 : bool :: Base, aux'4__14 : typ__1 :: Base, 
    aux'3__13 : typ__1 :: Base, aux'2__12 : bool :: Base, aux'1__11 : bool :: Base, 
    state__2__6 : typ__1 :: Base, cond__4__7 : bool :: Base, cond__3__8 : bool :: Base;
let
  (aux'1__11) = false;
  (aux'2__12) = true fby aux'1__11;
  (aux'4__14) = default(typ__1) fby aux'3__13;
  (aux'5__15) = false;
  (aux'6__16) = true fby aux'5__15;
  (aux'8__18) = 0 fby aux'7__17;
  (aux'9__19) = false;
  (aux'10__20) = true fby aux'9__19;
  (aux'12__22) = 0 fby aux'11__21;
  (state__2__6) = ite(aux'2__12, Even'typ__1, aux'4__14);
  (o__5) = merge state__2__6 
           (Even'typ__1 -> ite(aux'6__16, i__9, div(aux'8__18, 2)))
           (Odd'typ__1 -> ite(aux'10__20, i__9, add(mul(aux'12__22, 3), 1)));
  (cond__4__7) = eq(mod(o__5, 2), 0);
  (cond__3__8) = eq(mod(o__5, 2), 1);
  (aux'7__17) = o__5;
  (aux'11__21) = o__5;
  (aux'3__13) = merge state__2__6 
                (Even'typ__1 -> merge cond__3__8 
                (true -> Odd'typ__1 when True(cond__3__8))
                (false -> Even'typ__1 when False(cond__3__8)))
                (Odd'typ__1 -> merge cond__4__7 
                (true -> Even'typ__1 when True(cond__4__7))
                (false -> Odd'typ__1 when False(cond__4__7)))
tel
/**************************************/
/* Imp ast                            */
/**************************************/
type inductive_bool =
  | False
  | True
type typ__1 =
  | Even
  | Odd

node main0__10(i__9 : int :: Base)
  returns (o__5 : int :: Base)
var aux'12__22 : int :: Base, aux'11__21 : int :: Base, aux'10__20 : bool :: Base, 
    aux'9__19 : bool :: Base, aux'8__18 : int :: Base, aux'7__17 : int :: Base, 
    aux'6__16 : bool :: Base, aux'5__15 : bool :: Base, aux'4__14 : typ__1 :: Base, 
    aux'3__13 : typ__1 :: Base, aux'2__12 : bool :: Base, aux'1__11 : bool :: Base, 
    state__2__6 : typ__1 :: Base, cond__4__7 : bool :: Base, cond__3__8 : bool :: Base;
  mem={node=[]
       fby=[aux'2_next6__28 : bool :: Base, aux'4_next5__27 : typ__1 :: Base, 
            aux'6_next4__26 : bool :: Base, aux'8_next3__25 : int :: Base, 
            aux'10_next2__24 : bool :: Base, aux'12_next1__23 : int :: Base]}
  init={node=[]
        fby=[(aux'2_next6__28,true), (aux'4_next5__27,default(typ__1)), (aux'6_next4__26,true), (aux'8_next3__25,0), (aux'10_next2__24,true), (aux'12_next1__23,0)]}
  compute={(aux'1__11 : bool :: Base) = false;
           (aux'2__12 : bool :: Base) = aux'2_next6__28;
           (aux'4__14 : typ__1 :: Base) = aux'4_next5__27;
           (aux'5__15 : bool :: Base) = false;
           (aux'6__16 : bool :: Base) = aux'6_next4__26;
           (aux'8__18 : int :: Base) = aux'8_next3__25;
           (aux'9__19 : bool :: Base) = false;
           (aux'10__20 : bool :: Base) = aux'10_next2__24;
           (aux'12__22 : int :: Base) = aux'12_next1__23;
           (state__2__6 : typ__1 :: Base) = ite(aux'2__12, Even'typ__1,
                                            aux'4__14);
           (o__5 : int :: Base) = case(state__2__6)Even'typ__1: ite(aux'6__16,
                                                                i__9,
                                                                div(aux'8__18,
                                                                2));
                                                     Odd'typ__1: ite(aux'10__20,
                                                                 i__9,
                                                                 add(
                                                                 mul(aux'12__22,
                                                                 3), 1));
           (cond__4__7 : bool :: Base) = eq(mod(o__5, 2), 0);
           (cond__3__8 : bool :: Base) = eq(mod(o__5, 2), 1);
           (aux'7__17 : int :: Base) = o__5;
           (aux'11__21 : int :: Base) = o__5;
           (aux'3__13 : typ__1 :: Base) = case(state__2__6)Even'typ__1: case(cond__3__8)
                                                             True'inductive_bool: Odd'typ__1;
                                                               False'inductive_bool: Even'typ__1;
                                                             Odd'typ__1: case(cond__4__7)
                                                             True'inductive_bool: Even'typ__1;
                                                               False'inductive_bool: Odd'typ__1}
  update={(aux'2_next6__28,aux'1__11);
          (aux'4_next5__27,aux'3__13);
          (aux'6_next4__26,aux'5__15);
          (aux'8_next3__25,aux'7__17);
          (aux'10_next2__24,aux'9__19);
          (aux'12_next1__23,aux'11__21)}
  
/**************************************/
/* C file                             */
/**************************************/
#include <stdlib.h>

#include <printf.h>

#include <unistd.h>

int int_read() {
  int var;
  scanf("%d", &var);
  return var;
}

enum inductive_bool {
  FALSE,
  TRUE
};

enum typ__1 {
  EVEN,
  ODD
};

struct main0_mem {

  int aux__2_next6;
  enum typ__1 aux__4_next5;
  int aux__6_next4;
  int aux__8_next3;
  int aux__10_next2;
  int aux__12_next1;
};

void main0_init (struct main0_mem* mem) {
  mem->aux__2_next6 = 1;
  
  mem->aux__4_next5 = EVEN;
  
  mem->aux__6_next4 = 1;
  
  mem->aux__8_next3 = 0;
  
  mem->aux__10_next2 = 1;
  
  mem->aux__12_next1 = 0;
}

int main0 (struct main0_mem* mem, int i) {
  int aux__12;
  int aux__11;
  int aux__10;
  int aux__9;
  int aux__8;
  int aux__7;
  int aux__6;
  int aux__5;
  enum typ__1 aux__4;
  enum typ__1 aux__3;
  int aux__2;
  int aux__1;
  enum typ__1 state__2;
  int cond__4;
  int cond__3;
  int o;
  enum typ__1 switch_1;
  enum typ__1 switch_2;
  enum inductive_bool switch_3;
  enum inductive_bool switch_4;
  
  aux__1 = 0;
  
  aux__2 = mem->aux__2_next6;
  
  aux__4 = mem->aux__4_next5;
  
  aux__5 = 0;
  
  aux__6 = mem->aux__6_next4;
  
  aux__8 = mem->aux__8_next3;
  
  aux__9 = 0;
  
  aux__10 = mem->aux__10_next2;
  
  aux__12 = mem->aux__12_next1;
  
  state__2 = aux__2 ? EVEN : aux__4;
  
  switch (state__2) {
    case EVEN: {
      switch_1 = aux__6 ? i : (aux__8 / 2);
      break;
    }
    case ODD: {
      switch_1 = aux__10 ? i : ((aux__12 * 3) + 1);
      break;
    }
  };
  
  o = switch_1;
  
  cond__4 = ((o % 2) == 0);
  
  cond__3 = ((o % 2) == 1);
  
  aux__7 = o;
  
  aux__11 = o;
  
  switch (cond__3) {
    case TRUE: {
      switch_3 = ODD;
      break;
    }
    case FALSE: {
      switch_3 = EVEN;
      break;
    }
  };
  
  switch (cond__4) {
    case TRUE: {
      switch_4 = EVEN;
      break;
    }
    case FALSE: {
      switch_4 = ODD;
      break;
    }
  };
  
  switch (state__2) {
    case EVEN: {
      switch_2 = switch_3;
      break;
    }
    case ODD: {
      switch_2 = switch_4;
      break;
    }
  };
  
  aux__3 = switch_2;
  
  mem->aux__2_next6 = aux__1;
  
  mem->aux__4_next5 = aux__3;
  
  mem->aux__6_next4 = aux__5;
  
  mem->aux__8_next3 = aux__7;
  
  mem->aux__10_next2 = aux__9;
  
  mem->aux__12_next1 = aux__11;
  
  return o;
}

int main (int argc, char* argv[]) {
  struct main0_mem mem;
  int argv_0;
  int res;
  
  main0_init(&(mem));
  
  if ((argc < 2)) {
    printf("Error : %d needed arguments were not provided", 1);
    
    exit(1);
  };
  
  argv_0 = atoi(argv[1]);
  
  while (1) {
    res = main0(&(mem), argv_0);
    
    printf("%d ", res);
    
    fflush(0);
    
    usleep(333333);
  };
}
