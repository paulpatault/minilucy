
/**************************************/
/* Sugar automaton print              */
/**************************************/
type inductive_bool =
  | False
  | True
type t =
  | A
  | B

node main0() returns (o : t);
var ;
let
  (o) = (A't) -> (pre (merge o 
                         (A't -> B't when A(o))
                         (B't -> A't when B(o))));
tel

/**************************************/
/* Typed ast                          */
/**************************************/
type inductive_bool =
  | False
  | True
type t =
  | A
  | B

node main0__6() returns (o__5 : t)
var ;
let
  (o__5) = ite(true fby false, A't,
           default(t) fby merge o__5 
                            (A't -> B't when A(o__5))
                            (B't -> A't when B(o__5)));
tel

/**************************************/
/* Normalized ast                     */
/**************************************/
type inductive_bool =
  | False
  | True
type t =
  | A
  | B

node main0__6() returns (o__5 : t)
var aux'4__10: t; aux'3__9: t; aux'2__8: bool; aux'1__7: bool;
let
  (aux'4__10) = default(t) fby aux'3__9;
  (aux'3__9) = merge o__5 
                 (A't -> B't when A(o__5))
                 (B't -> A't when B(o__5));
  (aux'2__8) = true fby aux'1__7;
  (aux'1__7) = false;
  (o__5) = ite(aux'2__8, A't, aux'4__10);
tel

/**************************************/
/* Clocked ast                          */
/**************************************/
type inductive_bool =
  | False
  | True
type t =
  | A
  | B

node main0__6()
  returns (o__5 : t :: Base)
var aux'4__10 : t :: Base, aux'3__9 : t :: Base, aux'2__8 : bool :: Base, 
    aux'1__7 : bool :: Base;
let
  (aux'4__10) = default(t) fby aux'3__9;
  (aux'3__9) = merge o__5 
               (A't -> B't when A(o__5))
               (B't -> A't when B(o__5));
  (aux'2__8) = true fby aux'1__7;
  (aux'1__7) = false;
  (o__5) = ite(aux'2__8, A't, aux'4__10)
tel
/**************************************/
/* Scheduled ast                      */
/**************************************/
type inductive_bool =
  | False
  | True
type t =
  | A
  | B

node main0__6()
  returns (o__5 : t :: Base)
var aux'4__10 : t :: Base, aux'3__9 : t :: Base, aux'2__8 : bool :: Base, 
    aux'1__7 : bool :: Base;
let
  (aux'1__7) = false;
  (aux'2__8) = true fby aux'1__7;
  (aux'4__10) = default(t) fby aux'3__9;
  (o__5) = ite(aux'2__8, A't, aux'4__10);
  (aux'3__9) = merge o__5 
               (A't -> B't when A(o__5))
               (B't -> A't when B(o__5))
tel
/**************************************/
/* Imp ast                            */
/**************************************/
type inductive_bool =
  | False
  | True
type t =
  | A
  | B

node main0__6()
  returns (o__5 : t :: Base)
var aux'4__10 : t :: Base, aux'3__9 : t :: Base, aux'2__8 : bool :: Base, 
    aux'1__7 : bool :: Base;
  mem={node=[]
       fby=[aux'2_next2__12 : bool :: Base, aux'4_next1__11 : t :: Base]}
  init={node=[]
        fby=[(aux'2_next2__12,true), (aux'4_next1__11,default(t))]}
  compute={(aux'1__7 : bool :: Base) = false;
           (aux'2__8 : bool :: Base) = aux'2_next2__12;
           (aux'4__10 : t :: Base) = aux'4_next1__11;
           (o__5 : t :: Base) = ite(aux'2__8, A't, aux'4__10);
           (aux'3__9 : t :: Base) = case(o__5)A't: B't;
                                                B't: A't}
  update={(aux'2_next2__12,aux'1__7);
          (aux'4_next1__11,aux'3__9)}
  
/**************************************/
/* C file                             */
/**************************************/
#include <stdlib.h>

#include <printf.h>

#include <unistd.h>

int int_read() {
  int var;
  scanf("%d", &var);
  return var;
}

enum inductive_bool {
  FALSE,
  TRUE
};

enum t {
  A,
  B
};

struct main0_mem {
  int aux__2_next2;
  enum t aux__4_next1;
};

void main0_init (struct main0_mem* mem) {
  mem->aux__2_next2 = 1;
  
  mem->aux__4_next1 = A;
}

enum t main0 (struct main0_mem* mem) {
  enum t aux__4;
  enum t aux__3;
  int aux__2;
  int aux__1;
  enum t o;
  enum t switch_1;
  
  aux__1 = 0;
  
  aux__2 = mem->aux__2_next2;
  
  aux__4 = mem->aux__4_next1;
  
  o = aux__2 ? A : aux__4;
  
  switch (o) {
    case A: {
      switch_1 = B;
      break;
    }
    case B: {
      switch_1 = A;
      break;
    }
  };
  
  aux__3 = switch_1;
  
  mem->aux__2_next2 = aux__1;
  
  mem->aux__4_next1 = aux__3;
  
  return o;
}

int main (int argc, char* argv[]) {
  struct main0_mem mem;
  enum t res;
  
  main0_init(&(mem));
  
  while (1) {
    res = main0(&(mem));
    
    printf("%d\n", res);
    
    fflush(0);
    
    usleep(333333);
  };
}
