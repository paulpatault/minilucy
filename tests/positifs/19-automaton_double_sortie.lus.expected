
/**************************************/
/* Sugar automaton print              */
/**************************************/
type inductive_bool =
  | False
  | True
type typ__1 =
  | Chaud
  | Froid
  | PauseC
  | PauseF

node oscillateur(lo : int; hi : int; pause : bool) returns (x : int);
var state__2 : typ__1; cond__8 : bool; cond__7 : bool; cond__5 : bool;
    cond__6 : bool; cond__3 : bool; cond__4 : bool;
let
  (cond__8) = ~(pause);
  (cond__7) = ~(pause);
  (cond__5) = le(x, lo);
  (cond__6) = pause;
  (cond__3) = ge(x, hi);
  (cond__4) = pause;
  (state__2) = (Chaud'typ__1) -> (pre (merge state__2 
                                         (Chaud'typ__1 -> ite(cond__3,
                                                              Froid'typ__1,
                                                              ite(cond__4,
                                                                  PauseC'typ__1,
                                                                  Chaud'typ__1)))
                                         (Froid'typ__1 -> ite(cond__5,
                                                              Chaud'typ__1,
                                                              ite(cond__6,
                                                                  PauseF'typ__1,
                                                                  Froid'typ__1)))
                                         (PauseC'typ__1 -> ite(cond__7,
                                                               Chaud'typ__1,
                                                               PauseC'typ__1))
                                         (PauseF'typ__1 -> ite(cond__8,
                                                               Froid'typ__1,
                                                               PauseF'typ__1))));
  (x) = merge state__2 
          (Chaud'typ__1 -> (0) -> (add(pre (x), 1)))
          (Froid'typ__1 -> (0) -> (sub(pre (x), 1)))
          (PauseC'typ__1 -> (0) -> (pre (x)))
          (PauseF'typ__1 -> (0) -> (pre (x)));
tel

node main0(pause : bool) returns (o : int);
var ;
let
  (o) = oscillateur(sub(3), 3, pause);
tel

/**************************************/
/* Typed ast                          */
/**************************************/
type inductive_bool =
  | False
  | True
type typ__1 =
  | Chaud
  | Froid
  | PauseC
  | PauseF

node oscillateur__16(lo__13 : int; hi__14 : int; pause__15 : bool) returns (
x__5 : int)
var state__2__6: typ__1; cond__8__7: bool; cond__7__8: bool;
    cond__5__9: bool; cond__6__10: bool; cond__3__11: bool;
    cond__4__12: bool;
let
  (cond__8__7) = ~(pause__15);
  (cond__7__8) = ~(pause__15);
  (cond__5__9) = le(x__5, lo__13);
  (cond__6__10) = pause__15;
  (cond__3__11) = ge(x__5, hi__14);
  (cond__4__12) = pause__15;
  (state__2__6) = ite(true fby false, Chaud'typ__1,
                  default(typ__1) fby merge state__2__6 
                                        (Chaud'typ__1 -> merge cond__3__11 
                                                           (true -> Froid'typ__1 when True(cond__3__11))
                                                           (false -> 
                                                           merge cond__4__12 
                                                             (true -> 
                                                             PauseC'typ__1 when True(cond__4__12))
                                                             (false -> 
                                                             Chaud'typ__1 when False(cond__4__12)) when False(cond__3__11)))
                                        (Froid'typ__1 -> merge cond__5__9 
                                                           (true -> Chaud'typ__1 when True(cond__5__9))
                                                           (false -> 
                                                           merge cond__6__10 
                                                             (true -> 
                                                             PauseF'typ__1 when True(cond__6__10))
                                                             (false -> 
                                                             Froid'typ__1 when False(cond__6__10)) when False(cond__5__9)))
                                        (PauseC'typ__1 -> merge cond__7__8 
                                                            (true -> 
                                                            Chaud'typ__1 when True(cond__7__8))
                                                            (false -> 
                                                            PauseC'typ__1 when False(cond__7__8)))
                                        (PauseF'typ__1 -> merge cond__8__7 
                                                            (true -> 
                                                            Froid'typ__1 when True(cond__8__7))
                                                            (false -> 
                                                            PauseF'typ__1 when False(cond__8__7))));
  (x__5) = merge state__2__6 
             (Chaud'typ__1 -> ite(true fby false, 0, add(0 fby x__5,
             1)))
             (Froid'typ__1 -> ite(true fby false, 0, sub(0 fby x__5,
             1)))
             (PauseC'typ__1 -> ite(true fby false, 0,
             0 fby x__5))
             (PauseF'typ__1 -> ite(true fby false, 0, 0 fby x__5));
tel

node main0__19(pause__18 : bool) returns (o__17 : int)
var ;
let
  (o__17) = oscillateur__16(sub(3), 3, pause__18);
tel

/**************************************/
/* Normalized ast                     */
/**************************************/
type inductive_bool =
  | False
  | True
type typ__1 =
  | Chaud
  | Froid
  | PauseC
  | PauseF

node oscillateur__16(lo__13 : int; hi__14 : int; pause__15 : bool) returns (
x__5 : int)
var aux'20__39: int; aux'19__38: int; aux'18__37: bool; aux'17__36: bool;
    aux'16__35: int; aux'15__34: int; aux'14__33: bool; aux'13__32: bool;
    aux'12__31: int; aux'11__30: int; aux'10__29: bool; aux'9__28: bool;
    aux'8__27: int; aux'7__26: int; aux'6__25: bool; aux'5__24: bool;
    aux'4__23: typ__1; aux'3__22: typ__1; aux'2__21: bool; aux'1__20: bool;
    state__2__6: typ__1; cond__8__7: bool; cond__7__8: bool;
    cond__5__9: bool; cond__6__10: bool; cond__3__11: bool;
    cond__4__12: bool;
let
  (cond__8__7) = ~(pause__15);
  (cond__7__8) = ~(pause__15);
  (cond__5__9) = le(x__5, lo__13);
  (cond__6__10) = pause__15;
  (cond__3__11) = ge(x__5, hi__14);
  (cond__4__12) = pause__15;
  (aux'4__23) = default(typ__1) fby aux'3__22;
  (aux'3__22) = merge state__2__6 
                  (Chaud'typ__1 -> merge cond__3__11 
                                     (true -> Froid'typ__1 when True(cond__3__11))
                                     (false -> merge cond__4__12 
                                                 (true -> PauseC'typ__1 when True(cond__4__12))
                                                 (false -> Chaud'typ__1 when False(cond__4__12)) when False(cond__3__11)))
                  (Froid'typ__1 -> merge cond__5__9 
                                     (true -> Chaud'typ__1 when True(cond__5__9))
                                     (false -> merge cond__6__10 
                                                 (true -> PauseF'typ__1 when True(cond__6__10))
                                                 (false -> Froid'typ__1 when False(cond__6__10)) when False(cond__5__9)))
                  (PauseC'typ__1 -> merge cond__7__8 
                                      (true -> Chaud'typ__1 when True(cond__7__8))
                                      (false -> PauseC'typ__1 when False(cond__7__8)))
                  (PauseF'typ__1 -> merge cond__8__7 
                                      (true -> Froid'typ__1 when True(cond__8__7))
                                      (false -> PauseF'typ__1 when False(cond__8__7)));
  (aux'2__21) = true fby aux'1__20;
  (aux'1__20) = false;
  (state__2__6) = ite(aux'2__21, Chaud'typ__1, aux'4__23);
  (aux'20__39) = 0 fby aux'19__38;
  (aux'19__38) = x__5;
  (aux'18__37) = true fby aux'17__36;
  (aux'17__36) = false;
  (aux'16__35) = 0 fby aux'15__34;
  (aux'15__34) = x__5;
  (aux'14__33) = true fby aux'13__32;
  (aux'13__32) = false;
  (aux'12__31) = 0 fby aux'11__30;
  (aux'11__30) = x__5;
  (aux'10__29) = true fby aux'9__28;
  (aux'9__28) = false;
  (aux'8__27) = 0 fby aux'7__26;
  (aux'7__26) = x__5;
  (aux'6__25) = true fby aux'5__24;
  (aux'5__24) = false;
  (x__5) = merge state__2__6 
             (Chaud'typ__1 -> ite(aux'6__25, 0, add(aux'8__27,
             1)))
             (Froid'typ__1 -> ite(aux'10__29, 0, sub(aux'12__31,
             1)))
             (PauseC'typ__1 -> ite(aux'14__33, 0,
             aux'16__35))
             (PauseF'typ__1 -> ite(aux'18__37, 0, aux'20__39));
tel

node main0__19(pause__18 : bool) returns (o__17 : int)
var aux'21__40: int;
let
  (aux'21__40) = oscillateur__16(sub(3), 3, pause__18);
  (o__17) = aux'21__40;
tel

/**************************************/
/* Clocked ast                          */
/**************************************/
type inductive_bool =
  | False
  | True
type typ__1 =
  | Chaud
  | Froid
  | PauseC
  | PauseF

node oscillateur__16(lo__13 : int :: Base, hi__14 : int :: Base, pause__15 : bool :: Base)
  returns (x__5 : int :: Base)
var aux'20__39 : int :: Base, aux'19__38 : int :: Base, aux'18__37 : bool :: Base, 
    aux'17__36 : bool :: Base, aux'16__35 : int :: Base, aux'15__34 : int :: Base, 
    aux'14__33 : bool :: Base, aux'13__32 : bool :: Base, aux'12__31 : int :: Base, 
    aux'11__30 : int :: Base, aux'10__29 : bool :: Base, aux'9__28 : bool :: Base, 
    aux'8__27 : int :: Base, aux'7__26 : int :: Base, aux'6__25 : bool :: Base, 
    aux'5__24 : bool :: Base, aux'4__23 : typ__1 :: Base, aux'3__22 : typ__1 :: Base, 
    aux'2__21 : bool :: Base, aux'1__20 : bool :: Base, state__2__6 : typ__1 :: Base, 
    cond__8__7 : bool :: Base, cond__7__8 : bool :: Base, cond__5__9 : bool :: Base, 
    cond__6__10 : bool :: Base, cond__3__11 : bool :: Base, cond__4__12 : bool :: Base;
let
  (cond__8__7) = ~(pause__15);
  (cond__7__8) = ~(pause__15);
  (cond__5__9) = le(x__5, lo__13);
  (cond__6__10) = pause__15;
  (cond__3__11) = ge(x__5, hi__14);
  (cond__4__12) = pause__15;
  (aux'4__23) = default(typ__1) fby aux'3__22;
  (aux'3__22) = merge state__2__6 
                (Chaud'typ__1 -> merge cond__3__11 
                (true -> Froid'typ__1 when True(cond__3__11))
                (false -> merge cond__4__12 
                (true -> PauseC'typ__1 when True(cond__4__12))
                (false -> Chaud'typ__1 when False(cond__4__12)) when False(cond__3__11)))
                (Froid'typ__1 -> merge cond__5__9 
                (true -> Chaud'typ__1 when True(cond__5__9))
                (false -> merge cond__6__10 
                (true -> PauseF'typ__1 when True(cond__6__10))
                (false -> Froid'typ__1 when False(cond__6__10)) when False(cond__5__9)))
                (PauseC'typ__1 -> merge cond__7__8 
                (true -> Chaud'typ__1 when True(cond__7__8))
                (false -> PauseC'typ__1 when False(cond__7__8)))
                (PauseF'typ__1 -> merge cond__8__7 
                (true -> Froid'typ__1 when True(cond__8__7))
                (false -> PauseF'typ__1 when False(cond__8__7)));
  (aux'2__21) = true fby aux'1__20;
  (aux'1__20) = false;
  (state__2__6) = ite(aux'2__21, Chaud'typ__1, aux'4__23);
  (aux'20__39) = 0 fby aux'19__38;
  (aux'19__38) = x__5;
  (aux'18__37) = true fby aux'17__36;
  (aux'17__36) = false;
  (aux'16__35) = 0 fby aux'15__34;
  (aux'15__34) = x__5;
  (aux'14__33) = true fby aux'13__32;
  (aux'13__32) = false;
  (aux'12__31) = 0 fby aux'11__30;
  (aux'11__30) = x__5;
  (aux'10__29) = true fby aux'9__28;
  (aux'9__28) = false;
  (aux'8__27) = 0 fby aux'7__26;
  (aux'7__26) = x__5;
  (aux'6__25) = true fby aux'5__24;
  (aux'5__24) = false;
  (x__5) = merge state__2__6 
           (Chaud'typ__1 -> ite(aux'6__25, 0, add(aux'8__27, 1)))
           (Froid'typ__1 -> ite(aux'10__29, 0, sub(aux'12__31, 1)))
           (PauseC'typ__1 -> ite(aux'14__33, 0, aux'16__35))
           (PauseF'typ__1 -> ite(aux'18__37, 0, aux'20__39))
tel
node main0__19(pause__18 : bool :: Base)
  returns (o__17 : int :: Base)
var aux'21__40 : int :: Base;
let
  (aux'21__40) = oscillateur__16(sub(3), 3, pause__18);
  (o__17) = aux'21__40
tel
/**************************************/
/* Scheduled ast                      */
/**************************************/
type inductive_bool =
  | False
  | True
type typ__1 =
  | Chaud
  | Froid
  | PauseC
  | PauseF

node oscillateur__16(lo__13 : int :: Base, hi__14 : int :: Base, pause__15 : bool :: Base)
  returns (x__5 : int :: Base)
var aux'20__39 : int :: Base, aux'19__38 : int :: Base, aux'18__37 : bool :: Base, 
    aux'17__36 : bool :: Base, aux'16__35 : int :: Base, aux'15__34 : int :: Base, 
    aux'14__33 : bool :: Base, aux'13__32 : bool :: Base, aux'12__31 : int :: Base, 
    aux'11__30 : int :: Base, aux'10__29 : bool :: Base, aux'9__28 : bool :: Base, 
    aux'8__27 : int :: Base, aux'7__26 : int :: Base, aux'6__25 : bool :: Base, 
    aux'5__24 : bool :: Base, aux'4__23 : typ__1 :: Base, aux'3__22 : typ__1 :: Base, 
    aux'2__21 : bool :: Base, aux'1__20 : bool :: Base, state__2__6 : typ__1 :: Base, 
    cond__8__7 : bool :: Base, cond__7__8 : bool :: Base, cond__5__9 : bool :: Base, 
    cond__6__10 : bool :: Base, cond__3__11 : bool :: Base, cond__4__12 : bool :: Base;
let
  (cond__8__7) = ~(pause__15);
  (cond__7__8) = ~(pause__15);
  (cond__6__10) = pause__15;
  (cond__4__12) = pause__15;
  (aux'1__20) = false;
  (aux'2__21) = true fby aux'1__20;
  (aux'4__23) = default(typ__1) fby aux'3__22;
  (aux'5__24) = false;
  (aux'6__25) = true fby aux'5__24;
  (aux'8__27) = 0 fby aux'7__26;
  (aux'9__28) = false;
  (aux'10__29) = true fby aux'9__28;
  (aux'12__31) = 0 fby aux'11__30;
  (aux'13__32) = false;
  (aux'14__33) = true fby aux'13__32;
  (aux'16__35) = 0 fby aux'15__34;
  (aux'17__36) = false;
  (aux'18__37) = true fby aux'17__36;
  (aux'20__39) = 0 fby aux'19__38;
  (state__2__6) = ite(aux'2__21, Chaud'typ__1, aux'4__23);
  (x__5) = merge state__2__6 
           (Chaud'typ__1 -> ite(aux'6__25, 0, add(aux'8__27, 1)))
           (Froid'typ__1 -> ite(aux'10__29, 0, sub(aux'12__31, 1)))
           (PauseC'typ__1 -> ite(aux'14__33, 0, aux'16__35))
           (PauseF'typ__1 -> ite(aux'18__37, 0, aux'20__39));
  (cond__5__9) = le(x__5, lo__13);
  (cond__3__11) = ge(x__5, hi__14);
  (aux'7__26) = x__5;
  (aux'11__30) = x__5;
  (aux'15__34) = x__5;
  (aux'19__38) = x__5;
  (aux'3__22) = merge state__2__6 
                (Chaud'typ__1 -> merge cond__3__11 
                (true -> Froid'typ__1 when True(cond__3__11))
                (false -> merge cond__4__12 
                (true -> PauseC'typ__1 when True(cond__4__12))
                (false -> Chaud'typ__1 when False(cond__4__12)) when False(cond__3__11)))
                (Froid'typ__1 -> merge cond__5__9 
                (true -> Chaud'typ__1 when True(cond__5__9))
                (false -> merge cond__6__10 
                (true -> PauseF'typ__1 when True(cond__6__10))
                (false -> Froid'typ__1 when False(cond__6__10)) when False(cond__5__9)))
                (PauseC'typ__1 -> merge cond__7__8 
                (true -> Chaud'typ__1 when True(cond__7__8))
                (false -> PauseC'typ__1 when False(cond__7__8)))
                (PauseF'typ__1 -> merge cond__8__7 
                (true -> Froid'typ__1 when True(cond__8__7))
                (false -> PauseF'typ__1 when False(cond__8__7)))
tel
node main0__19(pause__18 : bool :: Base)
  returns (o__17 : int :: Base)
var aux'21__40 : int :: Base;
let
  (aux'21__40) = oscillateur__16(sub(3), 3, pause__18);
  (o__17) = aux'21__40
tel
/**************************************/
/* Imp ast                            */
/**************************************/
type inductive_bool =
  | False
  | True
type typ__1 =
  | Chaud
  | Froid
  | PauseC
  | PauseF

node oscillateur__16(lo__13 : int :: Base, hi__14 : int :: Base, pause__15 : bool :: Base)
  returns (x__5 : int :: Base)
var aux'20__39 : int :: Base, aux'19__38 : int :: Base, aux'18__37 : bool :: Base, 
    aux'17__36 : bool :: Base, aux'16__35 : int :: Base, aux'15__34 : int :: Base, 
    aux'14__33 : bool :: Base, aux'13__32 : bool :: Base, aux'12__31 : int :: Base, 
    aux'11__30 : int :: Base, aux'10__29 : bool :: Base, aux'9__28 : bool :: Base, 
    aux'8__27 : int :: Base, aux'7__26 : int :: Base, aux'6__25 : bool :: Base, 
    aux'5__24 : bool :: Base, aux'4__23 : typ__1 :: Base, aux'3__22 : typ__1 :: Base, 
    aux'2__21 : bool :: Base, aux'1__20 : bool :: Base, state__2__6 : typ__1 :: Base, 
    cond__8__7 : bool :: Base, cond__7__8 : bool :: Base, cond__5__9 : bool :: Base, 
    cond__6__10 : bool :: Base, cond__3__11 : bool :: Base, cond__4__12 : bool :: Base;
  mem={node=[]
       fby=[aux'2_next10__50 : bool :: Base, aux'4_next9__49 : typ__1 :: Base, 
            aux'6_next8__48 : bool :: Base, aux'8_next7__47 : int :: Base, 
            aux'10_next6__46 : bool :: Base, aux'12_next5__45 : int :: Base, 
            aux'14_next4__44 : bool :: Base, aux'16_next3__43 : int :: Base, 
            aux'18_next2__42 : bool :: Base, aux'20_next1__41 : int :: Base]}
  init={node=[]
        fby=[(aux'2_next10__50,true), (aux'4_next9__49,default(typ__1)), (aux'6_next8__48,true), (aux'8_next7__47,0), (aux'10_next6__46,true), (aux'12_next5__45,0), (aux'14_next4__44,true), (aux'16_next3__43,0), (aux'18_next2__42,true), (aux'20_next1__41,0)]}
  compute={(cond__8__7 : bool :: Base) = ~(pause__15);
           (cond__7__8 : bool :: Base) = ~(pause__15);
           (cond__6__10 : bool :: Base) = pause__15;
           (cond__4__12 : bool :: Base) = pause__15;
           (aux'1__20 : bool :: Base) = false;
           (aux'2__21 : bool :: Base) = aux'2_next10__50;
           (aux'4__23 : typ__1 :: Base) = aux'4_next9__49;
           (aux'5__24 : bool :: Base) = false;
           (aux'6__25 : bool :: Base) = aux'6_next8__48;
           (aux'8__27 : int :: Base) = aux'8_next7__47;
           (aux'9__28 : bool :: Base) = false;
           (aux'10__29 : bool :: Base) = aux'10_next6__46;
           (aux'12__31 : int :: Base) = aux'12_next5__45;
           (aux'13__32 : bool :: Base) = false;
           (aux'14__33 : bool :: Base) = aux'14_next4__44;
           (aux'16__35 : int :: Base) = aux'16_next3__43;
           (aux'17__36 : bool :: Base) = false;
           (aux'18__37 : bool :: Base) = aux'18_next2__42;
           (aux'20__39 : int :: Base) = aux'20_next1__41;
           (state__2__6 : typ__1 :: Base) = ite(aux'2__21, Chaud'typ__1,
                                            aux'4__23);
           (x__5 : int :: Base) = case(state__2__6)Chaud'typ__1: ite(aux'6__25,
                                                                 0,
                                                                 add(aux'8__27,
                                                                 1));
                                                     Froid'typ__1: ite(aux'10__29,
                                                                   0,
                                                                   sub(aux'12__31,
                                                                   1));
                                                     PauseC'typ__1: ite(aux'14__33,
                                                                    0,
                                                                    aux'16__35);
                                                     PauseF'typ__1: ite(aux'18__37,
                                                                    0,
                                                                    aux'20__39);
           (cond__5__9 : bool :: Base) = le(x__5, lo__13);
           (cond__3__11 : bool :: Base) = ge(x__5, hi__14);
           (aux'7__26 : int :: Base) = x__5;
           (aux'11__30 : int :: Base) = x__5;
           (aux'15__34 : int :: Base) = x__5;
           (aux'19__38 : int :: Base) = x__5;
           (aux'3__22 : typ__1 :: Base) = case(state__2__6)Chaud'typ__1: case(cond__3__11)
                                                             True'inductive_bool: Froid'typ__1;
                                                               False'inductive_bool: case(cond__4__12)
                                                               True'inductive_bool: PauseC'typ__1;
                                                                 False'inductive_bool: Chaud'typ__1;
                                                             Froid'typ__1: case(cond__5__9)
                                                             True'inductive_bool: Chaud'typ__1;
                                                               False'inductive_bool: case(cond__6__10)
                                                               True'inductive_bool: PauseF'typ__1;
                                                                 False'inductive_bool: Froid'typ__1;
                                                             PauseC'typ__1: case(cond__7__8)
                                                             True'inductive_bool: Chaud'typ__1;
                                                               False'inductive_bool: PauseC'typ__1;
                                                             PauseF'typ__1: case(cond__8__7)
                                                             True'inductive_bool: Froid'typ__1;
                                                               False'inductive_bool: PauseF'typ__1}
  update={(aux'2_next10__50,aux'1__20);
          (aux'4_next9__49,aux'3__22);
          (aux'6_next8__48,aux'5__24);
          (aux'8_next7__47,aux'7__26);
          (aux'10_next6__46,aux'9__28);
          (aux'12_next5__45,aux'11__30);
          (aux'14_next4__44,aux'13__32);
          (aux'16_next3__43,aux'15__34);
          (aux'18_next2__42,aux'17__36);
          (aux'20_next1__41,aux'19__38)}
  
node main0__19(pause__18 : bool :: Base)
  returns (o__17 : int :: Base)
var aux'21__40 : int :: Base;
  mem={node=[(oscillateur_next1__51,oscillateur__16)]
       fby=[]}
  init={node=[(oscillateur_next1__51,oscillateur__16)]
        fby=[]}
  compute={(aux'21__40 : int :: Base) = oscillateur__16 <- oscillateur_next1__51(
                                        sub(3), 3, pause__18);
           (o__17 : int :: Base) = aux'21__40}
  update={}
  
/**************************************/
/* C file                             */
/**************************************/
#include <stdlib.h>

#include <printf.h>

#include <unistd.h>

int int_read() {
  int var;
  scanf("%d", &var);
  return var;
}

enum inductive_bool {
  FALSE,
  TRUE
};

enum typ__1 {
  CHAUD,
  FROID,
  PAUSEC,
  PAUSEF
};

struct oscillateur_mem {

  int aux__2_next10;
  enum typ__1 aux__4_next9;
  int aux__6_next8;
  int aux__8_next7;
  int aux__10_next6;
  int aux__12_next5;
  int aux__14_next4;
  int aux__16_next3;
  int aux__18_next2;
  int aux__20_next1;
};

void oscillateur_init (struct oscillateur_mem* mem) {
  mem->aux__2_next10 = 1;
  
  mem->aux__4_next9 = CHAUD;
  
  mem->aux__6_next8 = 1;
  
  mem->aux__8_next7 = 0;
  
  mem->aux__10_next6 = 1;
  
  mem->aux__12_next5 = 0;
  
  mem->aux__14_next4 = 1;
  
  mem->aux__16_next3 = 0;
  
  mem->aux__18_next2 = 1;
  
  mem->aux__20_next1 = 0;
}

int oscillateur (struct oscillateur_mem* mem, int lo, int hi, int pause) {
  int aux__20;
  int aux__19;
  int aux__18;
  int aux__17;
  int aux__16;
  int aux__15;
  int aux__14;
  int aux__13;
  int aux__12;
  int aux__11;
  int aux__10;
  int aux__9;
  int aux__8;
  int aux__7;
  int aux__6;
  int aux__5;
  enum typ__1 aux__4;
  enum typ__1 aux__3;
  int aux__2;
  int aux__1;
  enum typ__1 state__2;
  int cond__8;
  int cond__7;
  int cond__5;
  int cond__6;
  int cond__3;
  int cond__4;
  int x;
  enum typ__1 switch_1;
  enum typ__1 switch_2;
  enum inductive_bool switch_3;
  enum inductive_bool switch_4;
  enum inductive_bool switch_5;
  enum inductive_bool switch_6;
  enum inductive_bool switch_7;
  enum inductive_bool switch_8;
  
  cond__8 = !(pause);
  
  cond__7 = !(pause);
  
  cond__6 = pause;
  
  cond__4 = pause;
  
  aux__1 = 0;
  
  aux__2 = mem->aux__2_next10;
  
  aux__4 = mem->aux__4_next9;
  
  aux__5 = 0;
  
  aux__6 = mem->aux__6_next8;
  
  aux__8 = mem->aux__8_next7;
  
  aux__9 = 0;
  
  aux__10 = mem->aux__10_next6;
  
  aux__12 = mem->aux__12_next5;
  
  aux__13 = 0;
  
  aux__14 = mem->aux__14_next4;
  
  aux__16 = mem->aux__16_next3;
  
  aux__17 = 0;
  
  aux__18 = mem->aux__18_next2;
  
  aux__20 = mem->aux__20_next1;
  
  state__2 = aux__2 ? CHAUD : aux__4;
  
  switch (state__2) {
    case CHAUD: {
      switch_1 = aux__6 ? 0 : (aux__8 + 1);
      break;
    }
    case FROID: {
      switch_1 = aux__10 ? 0 : (aux__12 - 1);
      break;
    }
    case PAUSEC: {
      switch_1 = aux__14 ? 0 : aux__16;
      break;
    }
    case PAUSEF: {
      switch_1 = aux__18 ? 0 : aux__20;
      break;
    }
  };
  
  x = switch_1;
  
  cond__5 = (x <= lo);
  
  cond__3 = (x >= hi);
  
  aux__7 = x;
  
  aux__11 = x;
  
  aux__15 = x;
  
  aux__19 = x;
  
  switch (cond__4) {
    case TRUE: {
      switch_4 = PAUSEC;
      break;
    }
    case FALSE: {
      switch_4 = CHAUD;
      break;
    }
  };
  
  switch (cond__3) {
    case TRUE: {
      switch_3 = FROID;
      break;
    }
    case FALSE: {
      switch_3 = switch_4;
      break;
    }
  };
  
  switch (cond__6) {
    case TRUE: {
      switch_6 = PAUSEF;
      break;
    }
    case FALSE: {
      switch_6 = FROID;
      break;
    }
  };
  
  switch (cond__5) {
    case TRUE: {
      switch_5 = CHAUD;
      break;
    }
    case FALSE: {
      switch_5 = switch_6;
      break;
    }
  };
  
  switch (cond__7) {
    case TRUE: {
      switch_7 = CHAUD;
      break;
    }
    case FALSE: {
      switch_7 = PAUSEC;
      break;
    }
  };
  
  switch (cond__8) {
    case TRUE: {
      switch_8 = FROID;
      break;
    }
    case FALSE: {
      switch_8 = PAUSEF;
      break;
    }
  };
  
  switch (state__2) {
    case CHAUD: {
      switch_2 = switch_3;
      break;
    }
    case FROID: {
      switch_2 = switch_5;
      break;
    }
    case PAUSEC: {
      switch_2 = switch_7;
      break;
    }
    case PAUSEF: {
      switch_2 = switch_8;
      break;
    }
  };
  
  aux__3 = switch_2;
  
  mem->aux__2_next10 = aux__1;
  
  mem->aux__4_next9 = aux__3;
  
  mem->aux__6_next8 = aux__5;
  
  mem->aux__8_next7 = aux__7;
  
  mem->aux__10_next6 = aux__9;
  
  mem->aux__12_next5 = aux__11;
  
  mem->aux__14_next4 = aux__13;
  
  mem->aux__16_next3 = aux__15;
  
  mem->aux__18_next2 = aux__17;
  
  mem->aux__20_next1 = aux__19;
  
  return x;
}

struct main0_mem {
  struct oscillateur_mem oscillateur_next1;
};

void main0_init (struct main0_mem* mem) {
  oscillateur_init(&(mem->oscillateur_next1));
}

int main0 (struct main0_mem* mem, int pause) {
  int aux__21;
  int o;
  int call_1;
  
  call_1 = oscillateur(&(mem->oscillateur_next1), -(3), 3, pause);
  
  aux__21 = call_1;
  
  o = aux__21;
  
  return o;
}

int main (int argc, char* argv[]) {
  struct main0_mem mem;
  int argv_0;
  int res;
  
  main0_init(&(mem));
  
  while (1) {
    argv_0 = int_read();
    
    res = main0(&(mem), argv_0);
    
    printf("%d\n", res);
    
    fflush(0);
    
    usleep(333333);
  };
}
