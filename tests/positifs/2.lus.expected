
/**************************************/
/* Sugar automaton print              */
/**************************************/
type inductive_bool =
  | False
  | True

node counter(res : bool; tick : bool) returns (o : int);
var ;
let
  (o) = ite(res, 0, ite(tick, (1) -> (add(pre (o), 1)), (0) -> (pre (o))));
tel

node main0() returns (y : int);
var half : bool;
let
  (y) = counter((false) -> (pre (gt(y, 10))), half);
  (half) = (true) -> (pre (~(half)));
tel

/**************************************/
/* Typed ast                          */
/**************************************/
type inductive_bool =
  | False
  | True

node counter__8(res__6 : bool; tick__7 : bool) returns (o__5 : int)
var ;
let
  (o__5) = merge res__6 
             (true -> 0 when True(res__6))
             (false -> merge tick__7 
                         (true -> ite(true fby false, 1, add(0 fby o__5,
                                  1)) when True(tick__7))
                         (false -> ite(true fby false, 0,
                                   0 fby o__5) when False(tick__7)) when False(res__6));
tel

node main0__11() returns (y__9 : int)
var half__10: bool;
let
  (y__9) = counter__8(ite(true fby false, false, false fby gt(y__9, 10)),
                      half__10);
  (half__10) = ite(true fby false, true, false fby ~(half__10));
tel

/**************************************/
/* Normalized ast                     */
/**************************************/
type inductive_bool =
  | False
  | True

node counter__8(res__6 : bool; tick__7 : bool) returns (o__5 : int)
var aux'8__19: int; aux'7__18: int; aux'6__17: bool; aux'5__16: bool;
    aux'4__15: int; aux'3__14: int; aux'2__13: bool; aux'1__12: bool;
let
  (aux'8__19) = 0 fby aux'7__18;
  (aux'7__18) = o__5;
  (aux'6__17) = true fby aux'5__16;
  (aux'5__16) = false;
  (aux'4__15) = 0 fby aux'3__14;
  (aux'3__14) = o__5;
  (aux'2__13) = true fby aux'1__12;
  (aux'1__12) = false;
  (o__5) = merge res__6 
             (true -> 0 when True(res__6))
             (false -> merge tick__7 
                         (true -> ite(aux'2__13, 1, add(aux'4__15,
                                  1)) when True(tick__7))
                         (false -> ite(aux'6__17, 0,
                                   aux'8__19) when False(tick__7)) when False(res__6));
tel

node main0__11() returns (y__9 : int)
var aux'17__28: bool; aux'16__27: bool; aux'15__26: bool; aux'14__25: bool;
    aux'13__24: int; aux'12__23: bool; aux'11__22: bool; aux'10__21: bool;
    aux'9__20: bool; half__10: bool;
let
  (aux'13__24) = counter__8(ite(aux'10__21, false, aux'12__23), half__10);
  (aux'12__23) = false fby aux'11__22;
  (aux'11__22) = gt(y__9, 10);
  (aux'10__21) = true fby aux'9__20;
  (aux'9__20) = false;
  (y__9) = aux'13__24;
  (aux'17__28) = false fby aux'16__27;
  (aux'16__27) = ~(half__10);
  (aux'15__26) = true fby aux'14__25;
  (aux'14__25) = false;
  (half__10) = ite(aux'15__26, true, aux'17__28);
tel

/**************************************/
/* Clocked ast                          */
/**************************************/
type inductive_bool =
  | False
  | True

node counter__8(res__6 : bool :: Base, tick__7 : bool :: Base)
  returns (o__5 : int :: Base)
var aux'8__19 : int :: Base, aux'7__18 : int :: Base, aux'6__17 : bool :: Base, 
    aux'5__16 : bool :: Base, aux'4__15 : int :: Base, aux'3__14 : int :: Base, 
    aux'2__13 : bool :: Base, aux'1__12 : bool :: Base;
let
  (aux'8__19) = 0 fby aux'7__18;
  (aux'7__18) = o__5;
  (aux'6__17) = true fby aux'5__16;
  (aux'5__16) = false;
  (aux'4__15) = 0 fby aux'3__14;
  (aux'3__14) = o__5;
  (aux'2__13) = true fby aux'1__12;
  (aux'1__12) = false;
  (o__5) = merge res__6 
           (true -> 0 when True(res__6))
           (false -> merge tick__7 
           (true -> ite(aux'2__13, 1, add(aux'4__15, 1)) when True(tick__7))
           (false -> ite(aux'6__17, 0, aux'8__19) when False(tick__7)) when False(res__6))
tel
node main0__11()
  returns (y__9 : int :: Base)
var aux'17__28 : bool :: Base, aux'16__27 : bool :: Base, aux'15__26 : bool :: Base, 
    aux'14__25 : bool :: Base, aux'13__24 : int :: Base, aux'12__23 : bool :: Base, 
    aux'11__22 : bool :: Base, aux'10__21 : bool :: Base, aux'9__20 : bool :: Base, 
    half__10 : bool :: Base;
let
  (aux'13__24) = counter__8(ite(aux'10__21, false, aux'12__23), half__10);
  (aux'12__23) = false fby aux'11__22;
  (aux'11__22) = gt(y__9, 10);
  (aux'10__21) = true fby aux'9__20;
  (aux'9__20) = false;
  (y__9) = aux'13__24;
  (aux'17__28) = false fby aux'16__27;
  (aux'16__27) = ~(half__10);
  (aux'15__26) = true fby aux'14__25;
  (aux'14__25) = false;
  (half__10) = ite(aux'15__26, true, aux'17__28)
tel
/**************************************/
/* Scheduled ast                      */
/**************************************/
type inductive_bool =
  | False
  | True

node counter__8(res__6 : bool :: Base, tick__7 : bool :: Base)
  returns (o__5 : int :: Base)
var aux'8__19 : int :: Base, aux'7__18 : int :: Base, aux'6__17 : bool :: Base, 
    aux'5__16 : bool :: Base, aux'4__15 : int :: Base, aux'3__14 : int :: Base, 
    aux'2__13 : bool :: Base, aux'1__12 : bool :: Base;
let
  (aux'1__12) = false;
  (aux'2__13) = true fby aux'1__12;
  (aux'4__15) = 0 fby aux'3__14;
  (aux'5__16) = false;
  (aux'6__17) = true fby aux'5__16;
  (aux'8__19) = 0 fby aux'7__18;
  (o__5) = merge res__6 
           (true -> 0 when True(res__6))
           (false -> merge tick__7 
           (true -> ite(aux'2__13, 1, add(aux'4__15, 1)) when True(tick__7))
           (false -> ite(aux'6__17, 0, aux'8__19) when False(tick__7)) when False(res__6));
  (aux'3__14) = o__5;
  (aux'7__18) = o__5
tel
node main0__11()
  returns (y__9 : int :: Base)
var aux'17__28 : bool :: Base, aux'16__27 : bool :: Base, aux'15__26 : bool :: Base, 
    aux'14__25 : bool :: Base, aux'13__24 : int :: Base, aux'12__23 : bool :: Base, 
    aux'11__22 : bool :: Base, aux'10__21 : bool :: Base, aux'9__20 : bool :: Base, 
    half__10 : bool :: Base;
let
  (aux'9__20) = false;
  (aux'10__21) = true fby aux'9__20;
  (aux'12__23) = false fby aux'11__22;
  (aux'14__25) = false;
  (aux'15__26) = true fby aux'14__25;
  (aux'17__28) = false fby aux'16__27;
  (half__10) = ite(aux'15__26, true, aux'17__28);
  (aux'13__24) = counter__8(ite(aux'10__21, false, aux'12__23), half__10);
  (aux'16__27) = ~(half__10);
  (y__9) = aux'13__24;
  (aux'11__22) = gt(y__9, 10)
tel
/**************************************/
/* Imp ast                            */
/**************************************/
type inductive_bool =
  | False
  | True

node counter__8(res__6 : bool :: Base, tick__7 : bool :: Base)
  returns (o__5 : int :: Base)
var aux'8__19 : int :: Base, aux'7__18 : int :: Base, aux'6__17 : bool :: Base, 
    aux'5__16 : bool :: Base, aux'4__15 : int :: Base, aux'3__14 : int :: Base, 
    aux'2__13 : bool :: Base, aux'1__12 : bool :: Base;
  mem={node=[]
       fby=[aux'2_next4__32 : bool :: Base, aux'4_next3__31 : int :: Base, 
            aux'6_next2__30 : bool :: Base, aux'8_next1__29 : int :: Base]}
  init={node=[]
        fby=[(aux'2_next4__32,true), (aux'4_next3__31,0), (aux'6_next2__30,true), (aux'8_next1__29,0)]}
  compute={(aux'1__12 : bool :: Base) = false;
           (aux'2__13 : bool :: Base) = aux'2_next4__32;
           (aux'4__15 : int :: Base) = aux'4_next3__31;
           (aux'5__16 : bool :: Base) = false;
           (aux'6__17 : bool :: Base) = aux'6_next2__30;
           (aux'8__19 : int :: Base) = aux'8_next1__29;
           (o__5 : int :: Base) = case(res__6)True'inductive_bool: 0;
                                                False'inductive_bool: case(tick__7)
                                                True'inductive_bool: 
                                                  ite(aux'2__13, 1,
                                                  add(aux'4__15, 1));
                                                  False'inductive_bool: 
                                                  ite(aux'6__17, 0,
                                                  aux'8__19);
           (aux'3__14 : int :: Base) = o__5;
           (aux'7__18 : int :: Base) = o__5}
  update={(aux'2_next4__32,aux'1__12);
          (aux'4_next3__31,aux'3__14);
          (aux'6_next2__30,aux'5__16);
          (aux'8_next1__29,aux'7__18)}
  
node main0__11()
  returns (y__9 : int :: Base)
var aux'17__28 : bool :: Base, aux'16__27 : bool :: Base, aux'15__26 : bool :: Base, 
    aux'14__25 : bool :: Base, aux'13__24 : int :: Base, aux'12__23 : bool :: Base, 
    aux'11__22 : bool :: Base, aux'10__21 : bool :: Base, aux'9__20 : bool :: Base, 
    half__10 : bool :: Base;
  mem={node=[(counter_next1__33,counter__8)]
       fby=[aux'10_next8__37 : bool :: Base, aux'12_next7__36 : bool :: Base, 
            aux'15_next6__35 : bool :: Base, aux'17_next5__34 : bool :: Base]}
  init={node=[(counter_next1__33,counter__8)]
        fby=[(aux'10_next8__37,true), (aux'12_next7__36,false), (aux'15_next6__35,true), (aux'17_next5__34,false)]}
  compute={(aux'9__20 : bool :: Base) = false;
           (aux'10__21 : bool :: Base) = aux'10_next8__37;
           (aux'12__23 : bool :: Base) = aux'12_next7__36;
           (aux'14__25 : bool :: Base) = false;
           (aux'15__26 : bool :: Base) = aux'15_next6__35;
           (aux'17__28 : bool :: Base) = aux'17_next5__34;
           (half__10 : bool :: Base) = ite(aux'15__26, true, aux'17__28);
           (aux'13__24 : int :: Base) = counter__8 <- counter_next1__33(
                                        ite(aux'10__21, false, aux'12__23),
                                        half__10);
           (aux'16__27 : bool :: Base) = ~(half__10);
           (y__9 : int :: Base) = aux'13__24;
           (aux'11__22 : bool :: Base) = gt(y__9, 10)}
  update={(aux'10_next8__37,aux'9__20);
          (aux'12_next7__36,aux'11__22);
          (aux'15_next6__35,aux'14__25);
          (aux'17_next5__34,aux'16__27)}
  
/**************************************/
/* C file                             */
/**************************************/
#include <stdlib.h>

#include <printf.h>

#include <unistd.h>

int int_read() {
  int var;
  scanf("%d", &var);
  return var;
}

enum inductive_bool {
  FALSE,
  TRUE
};

struct counter_mem {
  int aux__2_next4;
  int aux__4_next3;
  int aux__6_next2;
  int aux__8_next1;
};

void counter_init (struct counter_mem* mem) {
  mem->aux__2_next4 = 1;
  
  mem->aux__4_next3 = 0;
  
  mem->aux__6_next2 = 1;
  
  mem->aux__8_next1 = 0;
}

int counter (struct counter_mem* mem, int res, int tick) {
  int aux__8;
  int aux__7;
  int aux__6;
  int aux__5;
  int aux__4;
  int aux__3;
  int aux__2;
  int aux__1;
  int o;
  enum inductive_bool switch_1;
  enum inductive_bool switch_2;
  
  aux__1 = 0;
  
  aux__2 = mem->aux__2_next4;
  
  aux__4 = mem->aux__4_next3;
  
  aux__5 = 0;
  
  aux__6 = mem->aux__6_next2;
  
  aux__8 = mem->aux__8_next1;
  
  switch (tick) {
    case TRUE: {
      switch_2 = aux__2 ? 1 : (aux__4 + 1);
      break;
    }
    case FALSE: {
      switch_2 = aux__6 ? 0 : aux__8;
      break;
    }
  };
  
  switch (res) {
    case TRUE: {
      switch_1 = 0;
      break;
    }
    case FALSE: {
      switch_1 = switch_2;
      break;
    }
  };
  
  o = switch_1;
  
  aux__3 = o;
  
  aux__7 = o;
  
  mem->aux__2_next4 = aux__1;
  
  mem->aux__4_next3 = aux__3;
  
  mem->aux__6_next2 = aux__5;
  
  mem->aux__8_next1 = aux__7;
  
  return o;
}

struct main0_mem {

  struct counter_mem counter_next1;
  int aux__10_next8;
  int aux__12_next7;
  int aux__15_next6;
  int aux__17_next5;
};

void main0_init (struct main0_mem* mem) {
  mem->aux__10_next8 = 1;
  
  mem->aux__12_next7 = 0;
  
  mem->aux__15_next6 = 1;
  
  mem->aux__17_next5 = 0;
  
  counter_init(&(mem->counter_next1));
}

int main0 (struct main0_mem* mem) {
  int aux__17;
  int aux__16;
  int aux__15;
  int aux__14;
  int aux__13;
  int aux__12;
  int aux__11;
  int aux__10;
  int aux__9;
  int half;
  int y;
  int call_1;
  
  aux__9 = 0;
  
  aux__10 = mem->aux__10_next8;
  
  aux__12 = mem->aux__12_next7;
  
  aux__14 = 0;
  
  aux__15 = mem->aux__15_next6;
  
  aux__17 = mem->aux__17_next5;
  
  half = aux__15 ? 1 : aux__17;
  
  call_1 = counter(&(mem->counter_next1), aux__10 ? 0 : aux__12, half);
  
  aux__13 = call_1;
  
  aux__16 = !(half);
  
  y = aux__13;
  
  aux__11 = (y > 10);
  
  mem->aux__10_next8 = aux__9;
  
  mem->aux__12_next7 = aux__11;
  
  mem->aux__15_next6 = aux__14;
  
  mem->aux__17_next5 = aux__16;
  
  return y;
}

int main (int argc, char* argv[]) {
  struct main0_mem mem;
  int res;
  
  main0_init(&(mem));
  
  while (1) {
    res = main0(&(mem));
    
    printf("%d ", res);
    
    fflush(0);
    
    usleep(333333);
  };
}
