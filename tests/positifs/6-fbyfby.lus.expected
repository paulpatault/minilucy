
/**************************************/
/* Sugar automaton print              */
/**************************************/
type inductive_bool =
  | False
  | True

node f() returns (o : bool);
var ;
let
  (o) = (true) -> (pre ((false) -> (pre (o))));
tel

node main0() returns (o : bool);
var ;
let
  (o) = f();
tel

/**************************************/
/* Typed ast                          */
/**************************************/
type inductive_bool =
  | False
  | True

node f__6() returns (o__5 : bool)
var ;
let
  (o__5) = ite(true fby false, true,
           false fby ite(true fby false, false, false fby o__5));
tel

node main0__8() returns (o__7 : bool)
var ;
let
  (o__7) = f__6();
tel

/**************************************/
/* Normalized ast                     */
/**************************************/
type inductive_bool =
  | False
  | True

node f__6() returns (o__5 : bool)
var aux'8__16: bool; aux'7__15: bool; aux'6__14: bool; aux'5__13: bool;
    aux'4__12: bool; aux'3__11: bool; aux'2__10: bool; aux'1__9: bool;
let
  (aux'8__16) = false fby aux'7__15;
  (aux'7__15) = ite(aux'4__12, false, aux'6__14);
  (aux'6__14) = false fby aux'5__13;
  (aux'5__13) = o__5;
  (aux'4__12) = true fby aux'3__11;
  (aux'3__11) = false;
  (aux'2__10) = true fby aux'1__9;
  (aux'1__9) = false;
  (o__5) = ite(aux'2__10, true, aux'8__16);
tel

node main0__8() returns (o__7 : bool)
var aux'9__17: bool;
let
  (aux'9__17) = f__6();
  (o__7) = aux'9__17;
tel

/**************************************/
/* Clocked ast                          */
/**************************************/
type inductive_bool =
  | False
  | True

node f__6()
  returns (o__5 : bool :: Base)
var aux'8__16 : bool :: Base, aux'7__15 : bool :: Base, aux'6__14 : bool :: Base, 
    aux'5__13 : bool :: Base, aux'4__12 : bool :: Base, aux'3__11 : bool :: Base, 
    aux'2__10 : bool :: Base, aux'1__9 : bool :: Base;
let
  (aux'8__16) = false fby aux'7__15;
  (aux'7__15) = ite(aux'4__12, false, aux'6__14);
  (aux'6__14) = false fby aux'5__13;
  (aux'5__13) = o__5;
  (aux'4__12) = true fby aux'3__11;
  (aux'3__11) = false;
  (aux'2__10) = true fby aux'1__9;
  (aux'1__9) = false;
  (o__5) = ite(aux'2__10, true, aux'8__16)
tel
node main0__8()
  returns (o__7 : bool :: Base)
var aux'9__17 : bool :: Base;
let
  (aux'9__17) = f__6();
  (o__7) = aux'9__17
tel
/**************************************/
/* Scheduled ast                      */
/**************************************/
type inductive_bool =
  | False
  | True

node f__6()
  returns (o__5 : bool :: Base)
var aux'8__16 : bool :: Base, aux'7__15 : bool :: Base, aux'6__14 : bool :: Base, 
    aux'5__13 : bool :: Base, aux'4__12 : bool :: Base, aux'3__11 : bool :: Base, 
    aux'2__10 : bool :: Base, aux'1__9 : bool :: Base;
let
  (aux'1__9) = false;
  (aux'2__10) = true fby aux'1__9;
  (aux'3__11) = false;
  (aux'4__12) = true fby aux'3__11;
  (aux'6__14) = false fby aux'5__13;
  (aux'8__16) = false fby aux'7__15;
  (o__5) = ite(aux'2__10, true, aux'8__16);
  (aux'7__15) = ite(aux'4__12, false, aux'6__14);
  (aux'5__13) = o__5
tel
node main0__8()
  returns (o__7 : bool :: Base)
var aux'9__17 : bool :: Base;
let
  (aux'9__17) = f__6();
  (o__7) = aux'9__17
tel
/**************************************/
/* Imp ast                            */
/**************************************/
type inductive_bool =
  | False
  | True

node f__6()
  returns (o__5 : bool :: Base)
var aux'8__16 : bool :: Base, aux'7__15 : bool :: Base, aux'6__14 : bool :: Base, 
    aux'5__13 : bool :: Base, aux'4__12 : bool :: Base, aux'3__11 : bool :: Base, 
    aux'2__10 : bool :: Base, aux'1__9 : bool :: Base;
  mem={node=[]
       fby=[aux'2_next4__21 : bool :: Base, aux'4_next3__20 : bool :: Base, 
            aux'6_next2__19 : bool :: Base, aux'8_next1__18 : bool :: Base]}
  init={node=[]
        fby=[(aux'2_next4__21,true), (aux'4_next3__20,true), (aux'6_next2__19,false), (aux'8_next1__18,false)]}
  compute={(aux'1__9 : bool :: Base) = false;
           (aux'2__10 : bool :: Base) = aux'2_next4__21;
           (aux'3__11 : bool :: Base) = false;
           (aux'4__12 : bool :: Base) = aux'4_next3__20;
           (aux'6__14 : bool :: Base) = aux'6_next2__19;
           (aux'8__16 : bool :: Base) = aux'8_next1__18;
           (o__5 : bool :: Base) = ite(aux'2__10, true, aux'8__16);
           (aux'7__15 : bool :: Base) = ite(aux'4__12, false, aux'6__14);
           (aux'5__13 : bool :: Base) = o__5}
  update={(aux'2_next4__21,aux'1__9);
          (aux'4_next3__20,aux'3__11);
          (aux'6_next2__19,aux'5__13);
          (aux'8_next1__18,aux'7__15)}
  
node main0__8()
  returns (o__7 : bool :: Base)
var aux'9__17 : bool :: Base;
  mem={node=[(f_next1__22,f__6)]
       fby=[]}
  init={node=[(f_next1__22,f__6)]
        fby=[]}
  compute={(aux'9__17 : bool :: Base) = f__6 <- f_next1__22();
           (o__7 : bool :: Base) = aux'9__17}
  update={}
  
/**************************************/
/* C file                             */
/**************************************/
#include <stdlib.h>

#include <printf.h>

#include <unistd.h>

int int_read() {
  int var;
  scanf("%d", &var);
  return var;
}

enum inductive_bool {
  FALSE,
  TRUE
};

struct f_mem {
  int aux__2_next4;
  int aux__4_next3;
  int aux__6_next2;
  int aux__8_next1;
};

void f_init (struct f_mem* mem) {
  mem->aux__2_next4 = 1;
  
  mem->aux__4_next3 = 1;
  
  mem->aux__6_next2 = 0;
  
  mem->aux__8_next1 = 0;
}

int f (struct f_mem* mem) {
  int aux__8;
  int aux__7;
  int aux__6;
  int aux__5;
  int aux__4;
  int aux__3;
  int aux__2;
  int aux__1;
  int o;
  
  aux__1 = 0;
  
  aux__2 = mem->aux__2_next4;
  
  aux__3 = 0;
  
  aux__4 = mem->aux__4_next3;
  
  aux__6 = mem->aux__6_next2;
  
  aux__8 = mem->aux__8_next1;
  
  o = aux__2 ? 1 : aux__8;
  
  aux__7 = aux__4 ? 0 : aux__6;
  
  aux__5 = o;
  
  mem->aux__2_next4 = aux__1;
  
  mem->aux__4_next3 = aux__3;
  
  mem->aux__6_next2 = aux__5;
  
  mem->aux__8_next1 = aux__7;
  
  return o;
}

struct main0_mem {
  struct f_mem f_next1;
};

void main0_init (struct main0_mem* mem) {
  f_init(&(mem->f_next1));
}

int main0 (struct main0_mem* mem) {
  int aux__9;
  int o;
  int call_1;
  
  call_1 = f(&(mem->f_next1));
  
  aux__9 = call_1;
  
  o = aux__9;
  
  return o;
}

int main (int argc, char* argv[]) {
  struct main0_mem mem;
  int res;
  
  main0_init(&(mem));
  
  while (1) {
    res = main0(&(mem));
    
    printf("%d\n", res);
    
    fflush(0);
    
    usleep(333333);
  };
}
